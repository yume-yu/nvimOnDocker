#補完の基本機能群
[[plugins]]
  repo  = 'Shougo/denite.nvim'
  hook_add = '''
  let s:denite_win_width_percent = 0.5
  let s:denite_win_height_percent = 0.5

  " Deniteの設定
  nnoremap [denite] <Nop>
  nmap <Space> [denite]

  " Change denite default options
  call denite#custom#option('default', {
      \ 'split': 'floating',
    \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
    \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
    \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
    \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
    \ })

  call denite#custom#map('_', '<Tab>', '<denite:choose_action>', 'map')

  " nmap for denite-git
  call denite#custom#map('normal','a','<denite:do_action:add>','noremap')
  call denite#custom#map('normal','d','<denite:do_action:delete>','noremap')
  call denite#custom#map('normal','r','<denite:do_action:reset>','noremap')
  " Change default prompt
  call denite#custom#option('default', 'prompt', '➤ ')

  if executable('rg')
  call denite#custom#var('file/rec', 'command', ['rg', '--files', '--glob', '!.git'])
  call denite#custom#var('grep', 'command', ['rg', '--threads', '1'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'default_opts',
        \ ['--vimgrep', '--no-heading'])
  endif
  call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
      \ [ '.git/', '.ropeproject/', '__pycache__/',
      \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/',
      \   'node_modules/','*.jpg','*.pdf','.DS_Store'])
  "nnoremap <silent> ;l :<C-u>Denite -auto-action=preview line<CR>
  call denite#custom#source('file/old,file/rec', 'converters', ['converter/prioritize_basename'])

  "filetype設定
	nnoremap <silent> ft :<C-u>Denite -start-filter filetype<CR>
  nnoremap <silent> [denite]<CR> :<C-u>Denite -start-filter command <CR>
  nnoremap <silent> [denite]: :<C-u>Denite  command_history <CR>
  " Denite grep検索結果を再表示する
  nnoremap <silent> [denite]r :<C-u>Denite -resume<CR>
	nnoremap <silent> [denite]l :<C-u>Denite -start-filter -auto-action=highlight line<CR>
  nnoremap <silent> [denite]g :<C-u>Denite grep -auto-action=preview <CR>
  nnoremap <silent> [denite]G :<C-u>DeniteCursorWord grep -auto-action=preview<CR>
  nnoremap <silent> [denite]y :<C-u>Denite miniyank<CR>
  nnoremap <silent> [denite]Y :<C-u>Denite neoyank<CR>
  nnoremap <silent> [denite]b :<C-u>Denite -start-filter buffer <CR>
  nnoremap <silent> [denite]f :<C-u>Denite -start-filter -auto-action=preview file<CR>
  nnoremap <silent> [denite]F :<C-u>Denite -start-filter -auto-action=preview file/rec<CR>
  nnoremap <silent> [denite]h :<C-u>Denite -start-filter file/old<CR>
  nnoremap <silent> [denite]t :<C-u>Denite -start-filter tag<CR>
  nnoremap <silent> [denite]j :<C-u>Denite -start-filter jump<CR>
  nnoremap <silent> [denite]<c-g> :<c-u>Denite gitstatus<cr>
  nnoremap <silent> [denite]c :<c-u>Gcommit<cr>

  nnoremap [denite]T :<c-u>Deol -split=floating -winrow=30 -winheight=30 <cr>
  '''
#[[plugins]]
#repo = 'neovim/nvim-lsp'
#[[plugins]]
#repo = 'lighttiger2505/deoplete-vim-lsp'

[[plugins]]
  repo = 'Shougo/neosnippet-snippets'

[[plugins]]
  repo =  'Shougo/deol.nvim'
  hook_add = '''
  nnoremap <CR>			<Plug>(deol_execute_line)
  nnoremap <C-p>			<Plug>(deol_previous_prompt)
  nnoremap <C-n>			<Plug>(deol_next_prompt)
  nnoremap <C-y>			<Plug>(deol_paste_prompt)
  nnoremap <C-z>			<Plug>(deol_bg)
  nnoremap e			<Plug>(deol_edit)
  '''

#すごいの
[[plugins]]
  repo = 'Shougo/neomru.vim'
  on_if = 1
  on_source = ['denite.nvim']

[[plugins]]
  repo = 'Shougo/neosnippet'
  hook_add = '''
    let g:neosnippet#snippets_directory='~/.config/nvim/snippets'
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)
    if has('conceal')
      set conceallevel=2 concealcursor=niv
    endif
  '''
  #on_i  = 1
  on_ft = ['snippet']
  depends = ['neosnippet-snippets,deoplete']

[[plugins]]
  repo = 'Shougo/deoplete.nvim'
  on_event = 'InsertCharPre'
  hook_add = '''
  "自動起動on
  let g:deoplete#enable_at_startup = 1
  "補完開始する文字列長
  let g:deoplete#auto_complete_start_length = 1
  let g:deoplete#auto_complete_delay = 0      "入力からポップアップ表示までのdealy[ms]
  let g:deoplete#enable_smart_case = 1        "大文字小文字を区別
  inoremap <expr><tab> pumvisible() ? "\<C-n>" :
        \ neosnippet#expandable_or_jumpable() ?
        \ neosnippet#mappings#expand_or_jump_impl() : "\<tab>"
  '''
[[plugins]]
  repo = 'Shougo/deoplete-lsp'
  depends = ['Shougo/deoplete']

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
depends = ['deoplete.nvim']
build = '/bin/sh install.sh'
hook_add = '''
set hidden
let g:LanguageClient_serverCommands = {
      \ 'python': ['/Users/yume_yu/.pyenv/shims/pyls'],
      \ }
let g:LanguageClient_loadSettings = 1
let g:LanguageClient_hasSnippetSupport = 0

set completefunc=LanguageClient#complete

nnoremap K :call LanguageClient#textDocument_hover()<CR>
nnoremap F :call LanguageClient#textDocument_formatting()<CR>
'''

[[plugins]]
repo = 'deoplete-plugins/deoplete-zsh'


[[plugins]]
repo = 'bfredl/nvim-miniyank'
hook_add = '''
  map mp <Plug>(miniyank-startput)
  map mP <Plug>(miniyank-startput)
'''

# [[plugins]]
# repo = 'Shougo/neoyank.vim'
# hook_add = '''
#   let neoyank#save_registers=["*","+"]
# '''

[[plugins]]
  repo = 'hrsh7th/denite-converter-prioritize-basename'

[[plugins]]
  repo = 'chemzqm/denite-git'
  depends =  ['denite.nvim']
  add_source = '''
  call denite#custom#map(
        \ 'normal',
        \ 'a',
        \ '<denite:do_action:add>',
        \ 'noremap'
        \)

  call denite#custom#map(
        \ 'normal',
        \ 'd',
        \ '<denite:do_action:delete>',
        \ 'noremap'
        \)

  call denite#custom#map(
        \ 'normal',
        \ 'r',
        \ '<denite:do_action:reset>',
        \ 'noremap'
        \)
  '''

[[plugins]]
  repo ='kristijanhusak/defx-icons'

[[plugins]]
  repo ='kristijanhusak/defx-git'
  hook_add = '''
    let g:defx_git#indicators = {
      \ 'Modified'  : '+',
      \ 'Staged'    : '●',
      \ 'Untracked' : '?',
      \ 'Renamed'   : '➜',
      \ 'Unmerged'  : '═',
      \ 'Deleted'   : 'x',
      \ 'Unknown'   : '?'
      \ }
  '''

[[plugins]]
  repo ='Shougo/defx.nvim'
  on_cmd = 'Defx'
  depends = ['defx-icons', 'defx-git']
  hook_add = '''
    nnoremap <silent> <Space><Space> :<C-u>Defx -split=vertical  -winwidth=50 -columns=indent:git:icons:filename:type -resume   -direction=topleft  -show-ignored-files <CR>
  '''
  hook_source = '''
    function! Root(path) abort
      return fnamemodify(a:path, ':t')
    endfunction

    call defx#custom#source('file', {
        \ 'root': 'Root',
        \})

    call defx#custom#column('filename', {
        \ 'directory_icon': '',
        \ 'opened_icon': '',
        \ })

    call defx#custom#column('mark', {
        \ 'readonly_icon': '✗',
        \ 'selected_icon': '✓',
        \ })

    call defx#custom#option('_', {
        \ 'columns': 'indent:git:icons:filename',
        \ 'show_ignored_files': 1,
        \ })

'''

#様々な言語のシンタックスを追加する
[[plugins]]
  repo = 'sheerun/vim-polyglot'

# editorconfigを読み込むプラグイン
[[plugins]]
  repo = 'editorconfig/editorconfig-vim'

#テーマ
[[plugins]]
  repo = 'cocopon/iceberg.vim'
  hook_add = '''
  "カラースキーム固定
  colorscheme iceberg
  '''

#vimのステータスバーがおしゃれになっちゃうあれ
[[plugins]]
  repo = 'vim-airline/vim-airline'
  depends = ['vim-airline-theme','jacoborus/tender.vim']
  hook_add = '''
  ""airlineのタブ移動をショートカット
  "nmap <C-n> <Plug>AirlineSelectNextTab
  ""ステータスライン関連(airline)
  set laststatus=2
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#buffer_idx_mode = 1
  "let g:airline#extensions#whitespace#mixed_indent_algo = 1
  " let g:airline_theme = 'angr'
  let g:airline_theme = 'tender'
  let g:airline#extensions#ale#enabled = 2

  if !exists('g:airline_symbols')
  let g:airline_symbols = {}
  endif
  "" unicode symbols
  let g:airline_left_sep = "»"
  let g:airline_left_sep = ""
  let g:airline_right_sep = "«"
  let g:airline_right_sep = ""
  let g:airline_symbols.crypt = ""
  let g:airline_symbols.linenr = "␊"
  let g:airline_symbols.linenr = "␤"
  let g:airline_symbols.linenr = "¶"
  let g:airline_symbols.maxlinenr = "☰"
  let g:airline_symbols.maxlinenr = ""
  let g:airline_symbols.branch = "⎇"
  let g:airline_symbols.paste = "ρ"
  let g:airline_symbols.paste = "Þ"
  let g:airline_symbols.paste = "∥"
  let g:airline_symbols.spell = "Ꞩ"
  let g:airline_symbols.notexists = "∄"
  let g:airline_symbols.whitespace = "Ξ"
  let g:airline_left_sep = ""
  let g:airline_left_alt_sep = ""
  let g:airline_right_sep = ""
  let g:airline_right_alt_sep = ""
  let g:airline_symbols.branch = ""
  let g:airline_symbols.readonly = ""
  let g:airline_symbols.linenr = ""
  '''

# airlineのおまけ
[[plugins]]
  repo = 'vim-airline/vim-airline-themes'

[[plugins]]
  repo = 'jacoborus/tender.vim'
# git連携するプラグイン/Gstatusのあれ
[[plugins]]
  repo = 'tpope/vim-fugitive'

#gitの増加減少blameを左に出してくれる
[[plugins]]
  repo = 'airblade/vim-gitgutter'
  hook_source = '''
  let g:gitgutter_map_keys = 0
  '''

[[plugins]]
  repo = 'rhysd/accelerated-jk'
  hook_add = '''
    "" j/kによる移動を速くする
    nmap j <Plug>(accelerated_jk_gj)
    nmap k <Plug>(accelerated_jk_gk)
  '''

# カーソル行からファイルタイプを推定するプラグイン
[[plugins]]
  repo = 'Shougo/context_filetype.vim'

# 検索時ハイライトのため検索を置換する
[[plugins]]
  repo = 'haya14busa/incsearch.vim'
  hook_source = '''
    map /  <Plug>(incsearch-forward)
    map ?  <Plug>(incsearch-backward)
    map g/ <Plug>(incsearch-stay)
  '''

[[plugins]]
  repo ='simeji/winresizer'

[[plugins]]
  repo = 'yume-yu/twitvim'
  hook_add = '''
    let g:twitvim_browser_cmd="open"
    let g:twitvim_force_ssl = 1
    let g:twitvim_count = 20
    let g:twitvim_open_position = "bottom"
    let twitvim_allow_multiline = 1
    let g:twitvim_lines_default = 1
    let g:twitvim_show_username = 1
    " twitvimの設定
    nnoremap [twitvim] <Nop>
    nmap ; [twitvim]
    nnoremap [twitvim]t :<c-u>Fri<cr>
    nnoremap [twitvim]a :call twitvim#CmdLine_Twitter('', 0)<CR>
    nnoremap [twitvim]i :<c-u>ListTwitter information<cr>
    nnoremap [twitvim]c :execute bufwinnr(buffer_name("^Twitter*")).'hide'<cr>
  '''

  hook_source = '''
    nnoremap [twitvim]r :<c-u>RefreshTwitter<cr>
  '''

[[plugins]]
  repo = 'thinca/vim-quickrun'
  hook_add = '''
  let g:quickrun_config = {}
  let g:quickrun_config["dot"] = {
    \ 'hook/cd/directory': '%S:p:h',
    \ 'command': 'dot',
    \ 'cmdopt': '',
    \ 'exec': ['%c -T png %s -o %s:r.png', 'open -g %s:r.png'],
    \ 'outputter/quickfix/errorformat' : 'Error: %f: %m in line %l %.%#,%EError: %m,%C%m,%Z%m',
    \ "outputter/buffer/close_on_empty" : 1
    \ }
  let g:quickrun_config['plantuml'] = {
    \  'command': 'plantuml'
    \, 'exec': ['%c -charset UTF-8 %s', 'open %s:p:r.png']
    \, 'outputter': 'null'
    \}
  '''

[[plugins]]
repo = "majutsushi/tagbar"

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'vim-scripts/Align'

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'mattn/gist-vim'
depends = ['mattn/webapi-vim']
